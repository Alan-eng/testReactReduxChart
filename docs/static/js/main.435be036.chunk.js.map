{"version":3,"sources":["features/controls/ChartTimeRange.module.css","features/controls/ChartParameter.module.css","app/chartSlice.js","features/chart/ChartF.js","features/controls/ChartTimeRange.js","features/controls/ChartParameter.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","slice","createSlice","name","initialState","value","activeTimeRange","activeParameter","loading","data","week","labels","createRandomData","month","quarter","year","max","reducers","setData","state","action","payload","expireDate","price","yeild","spread","timeInterval","loadingStart","loadingStop","setChartTimeRange","setChartParameter","actions","increment","decrement","incrementByAmount","setDataMonth","createRandomArray","Array","from","length","Math","floor","random","Date","now","selectLoadingStatus","chart","selectActiveParameter","selectActiveTimeRange","selectActiveData","timeRange","parameter","Chart","canvas","useRef","dataToShow","useSelector","useEffect","ChartJS","current","type","datasets","label","fill","borderColor","backgroundColor","ref","TimeRangeButtons","dispatch","useDispatch","className","styles","radioToolbar","map","el","key","id","checked","toLowerCase","onChange","getState","setTimeout","console","log","htmlFor","ChartParameter","select","defaultValue","selected","App","ChartTimeRange","ChartF","configureStore","reducer","chartReducer","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.435be036.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"radioToolbar\":\"ChartTimeRange_radioToolbar__1eF2t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"ChartParameter_select__2lMKK\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const slice = createSlice({\r\n  name: 'chart',\r\n  initialState: {\r\n    value: 0,\r\n    activeTimeRange: 'week',\r\n    activeParameter: 'price',\r\n    loading: false,\r\n    data: {\r\n      week: {\r\n        labels: [\"01.02\", \"02.02\", \"03.02\", \"04.02\", \"05.02\", \"06.02\", \"07.02\"],\r\n        ...createRandomData()\r\n      },\r\n      month: {\r\n        labels: [\"02.02\", \"06.02\", \"10.02\", \"14.02\", \"18.02\", \"22.02\", \"26.02\"],\r\n        ...createRandomData()\r\n      },\r\n      quarter: {\r\n        labels: [\"1 week\", \"2 week\", \"3 week\", \"4 week\", \"5 week\", \"6 week\"],\r\n        ...createRandomData()\r\n      },\r\n      year: {\r\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n        ...createRandomData()\r\n      },\r\n      max: {\r\n        labels: [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\r\n        ...createRandomData()\r\n      },\r\n    }\r\n  },\r\n  reducers: {\r\n    setData: (state, action) => {\r\n      const { expireDate, price, yeild, spread } = action.payload.data\r\n      const timeInterval = action.payload.timeInterval\r\n\r\n      state.data[timeInterval].expireDate = expireDate\r\n      state.data[timeInterval].price = price\r\n      state.data[timeInterval].yeild = yeild\r\n      state.data[timeInterval].spread = spread\r\n    },\r\n    loadingStart: (state, action) => {\r\n      state.loading = true\r\n    },\r\n    loadingStop: (state, action) => {\r\n      state.loading = false\r\n    },\r\n    setChartTimeRange: (state, action) => {\r\n      state.activeTimeRange = action.payload;\r\n    },\r\n    setChartParameter: (state, action) => {\r\n      state.activeParameter = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  increment, \r\n  decrement, \r\n  incrementByAmount,\r\n  setDataMonth,\r\n  setData,\r\n  loadingStart,\r\n  loadingStop,\r\n  setChartTimeRange,\r\n  setChartParameter,\r\n} = slice.actions;\r\n\r\nfunction createRandomData () {\r\n  const createRandomArray = () => {return Array.from({length: 10}, () => Math.floor(Math.random() * 1000))}\r\n  const randomData ={\r\n    expireDate: Date.now() + 5000,\r\n    price: createRandomArray(),\r\n    yeild: createRandomArray(),\r\n    spread: createRandomArray()\r\n  }\r\n  return randomData\r\n}\r\n\r\nexport const fetchDataAsync = timeInterval => (dispatch, getState) => {\r\n  if (Date.now() > getState().chart.data[timeInterval].expireDate){\r\n    dispatch(loadingStart())\r\n    setTimeout(() => {\r\n          dispatch(setData({\r\n            timeInterval,\r\n            data: createRandomData()\r\n          }))\r\n          dispatch(loadingStop())\r\n    }, 1000);\r\n   } else {\r\n    console.log('вы используете свежие данные')\r\n   }\r\n};\r\n\r\nexport const selectLoadingStatus = state => state.chart.loading;\r\nexport const selectActiveParameter = state => state.chart.activeParameter;\r\nexport const selectActiveTimeRange = state => state.chart.activeTimeRange;\r\nexport const selectActiveData = state => {\r\n  const timeRange = state.chart.activeTimeRange\r\n  const parameter = state.chart.activeParameter\r\n  return {\r\n    labels: state.chart.data[timeRange].labels,\r\n    data: state.chart.data[timeRange][parameter]\r\n  }\r\n}\r\n\r\nexport default slice.reducer;\r\n","import React, { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    selectActiveData,\n} from '../../app/chartSlice';\nimport { Chart as ChartJS } from 'chart.js';\n\nexport function Chart({ data }) {\n    const canvas = useRef(null);\n    const dataToShow = useSelector(selectActiveData);\n\n\n    useEffect(() => {\n        new ChartJS(canvas.current, {\n            type: 'line',\n            data: {\n                labels: dataToShow.labels,\n                datasets: [ {\n                    type: \"line\",\n                    label: '',\n                    fill: false,\n                    data: dataToShow.data,\n                    borderColor: 'rgba(22, 115, 143, 0.8)',\n                    backgroundColor: 'rgba(22, 115, 143, 1)'\n                }]\n            }\n        });\n    });\n\n\n    return (\n            <canvas ref={canvas}></canvas>\n    )\n}\n\nexport default Chart;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    setChartTimeRange,\n    selectActiveTimeRange,\n    selectLoadingStatus,\n    fetchDataAsync\n} from '../../app/chartSlice';\nimport styles from './ChartTimeRange.module.css';\n\n\nexport function TimeRangeButtons({ data }) {\n    const dispatch = useDispatch();\n    const activeTimeRange = useSelector(selectActiveTimeRange);\n    const loading = useSelector(selectLoadingStatus);\n\n    return (\n        <>\n            < div className={styles.radioToolbar} >\n                {['Week', 'Month', 'Quarter', 'Year', 'Max'].map((el) =>\n                    <div key={el}>\n                        <input\n                            type=\"radio\"\n                            id={`radio${el}`}\n                            name=\"radioTime\"\n                            checked={activeTimeRange === el.toLowerCase() ? true : false}\n                            onChange={() => {\n                                dispatch(fetchDataAsync(el.toLowerCase()))\n                                dispatch(setChartTimeRange(el.toLowerCase()))\n                            }}\n                        />\n                        <label htmlFor={`radio${el}`}>{el}</label>\n                    </div>\n                )}\n            </div>\n            <p>{loading ? 'Загружаю новые данные...' : 'Данные обновлены'}</p>\n        </>\n\n    )\n}\n\n\nexport default TimeRangeButtons;\n","import React, { useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    selectActiveParameter,\n    setChartParameter\n} from '../../app/chartSlice';\nimport styles from './ChartParameter.module.css';\n\n\nexport function ChartParameter({ data }) {\n    const select = useRef(null);\n    const dispatch = useDispatch();\n    const activeParameter = useSelector(selectActiveParameter);\n\n\n    return (\n        <select\n            ref={select}\n            defaultValue={activeParameter}\n            onChange={(selected) => {\n                dispatch(setChartParameter(select.current.value.toLowerCase()))\n            }}\n            className={styles.select} id=\"cars\" name=\"cars\"\n            >\n            {['Yeild', 'Spread', 'Price'].map((el) =>\n                <option key={el}>{el}</option>\n            )}\n        </select>\n\n    )\n}\n\n\nexport default ChartParameter;\n","import React from 'react';\r\nimport ChartF from './features/chart/ChartF'\r\nimport ChartTimeRange from './features/controls/ChartTimeRange'\r\nimport ChartParameter from './features/controls/ChartParameter'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <ChartTimeRange />\r\n        <ChartParameter />\r\n        <ChartF />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport chartReducer from './chartSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    chart: chartReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}